'use client';

import { useState, useEffect } from "react";
import { MockAreaData } from "@/mocks";
import AreaCard from "@/components/areaMonitoring/areaCard";
import { STATUS_STYLES } from "@/constants/status";
import { AreaData } from "@/types/models/area";

export default function AreaList() {
    const [areas, setAreas] = useState<AreaData[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    // MockAreaData ÎèôÍ∏∞Ìôî
    useEffect(() => {
        const loadAreas = () => {
            // MockAreaDataÎ•º Î≥µÏÇ¨Ìï¥ÏÑú ÏÇ¨Ïö© (Ï∞∏Ï°∞ Î¨∏Ï†ú Î∞©ÏßÄ)
            const currentAreas = [...MockAreaData];
            setAreas(currentAreas);
            setIsLoading(false);

            console.log('üîÑ AreaList ÏóÖÎç∞Ïù¥Ìä∏:', currentAreas);
        };

        // Ï¥àÍ∏∞ Î°úÎìú
        loadAreas();

        // MockAreaData Î≥ÄÍ≤Ω Í∞êÏßÄÎ•º ÏúÑÌïú Ïù∏ÌÑ∞Î≤å (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        const interval = setInterval(() => {
            if (areas.length !== MockAreaData.length ||
                JSON.stringify(areas) !== JSON.stringify(MockAreaData)) {
                loadAreas();
            }
        }, 1000);

        return () => clearInterval(interval);
    }, [areas]);
    // mock dataÏôÄ ÏßÅÏ†ë Í¥ÄÎ†®Ïù¥ ÏûàÎäî Ïú†Ìã∏ Ìï®ÏàòÏù¥ÎØÄÎ°ú Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥Ïóê ÎëêÍ∏∞Î°ú Ìï®
    // UtilsÏóêÎäî Pure functionÎßå Îì§Ïñ¥Í∞ÄÍ∏∞ ÎïåÎ¨∏Ïóê 
    // areaCard ÏÉÅÌÉúÎ≥Ñ Ï†ïÎ†¨
    const sortedAreas = [...MockAreaData].sort((a, b) => {
        const statusA = a.status || 'offline';
        const statusB = b.status || 'offline';

        // STATUS_STYLESÏóêÏÑú priority Ï∞æÍ∏∞
        const priorityA = Object.values(STATUS_STYLES).find(style => style.status === statusA)?.priority || 999;
        const priorityB = Object.values(STATUS_STYLES).find(style => style.status === statusB)?.priority || 999;
        return priorityA - priorityB;
    });

    if (isLoading) {
        return (
            <div className="text-white text-center py-8">
                <p>Íµ¨Ïó≠ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
        );
    }

    return (
        <div className="grid grid-cols-1 gap-4">
            {sortedAreas.map((area) => (
                <AreaCard
                    key={area.id}
                    data={area}
                />
            ))}
        </div>
    )
}